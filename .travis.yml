dist: trusty
sudo: required
language: c
cache:
  apt: true
  directories:
    - $HOME/cache

env:
  global:
    - ZLIB_VER=1.2.11
    - NCURSES_VER=6.0
    - LIBICONV_VER=1.15
    - READLINE_VER=7.0
    - OPENSSL_VER=1.0.2m
    - GMP_VER=6.1.2
    - MPFR_VER=3.1.6
    - MPC_VER=1.0.3
    - BINUTILS_VER=2.29.1
    - KERNEL_VER=4.x
    - KERNEL_VER_FULL=4.9.41
    - GCC_VER=6.3.0
    - GLIBC_VER=2.25

matrix:
  include:
    - os: linux
      addons:
        apt:
          packages:
            - gcc-4.9
            - g++-4.9
            - golang-1.6
          sources:
            - ubuntu-toolchain-r-test
      compiler: gcc-4.9
      env: CXX=g++-4.9 PLATFORM=linux-x86_64 CACHE_NAME=JOB1 RELEASE=false

    - os: linux
      addons:
        apt:
          packages:
            - gcc-5
            - g++-5
            - golang-1.6
          sources:
            - ubuntu-toolchain-r-test
      compiler: gcc-5
      env: CXX=g++-5 PLATFORM=linux-x86_64 CACHE_NAME=JOB2 RELEASE=false

    - os: linux
      addons:
        apt:
          packages:
            - gcc-6
            - g++-6
            - golang-1.6
          sources:
            - ubuntu-toolchain-r-test
      compiler: gcc-6
      env: CXX=g++-6 PLATFORM=linux-x86_64 CACHE_NAME=JOB3 RELEASE=true

    - os: linux
      addons:
        apt:
          packages:
            - gcc-7
            - g++-7
            - golang-1.6
          sources:
            - ubuntu-toolchain-r-test
      compiler: gcc-7
      env: CXX=g++-7 PLATFORM=linux-x86_64 CACHE_NAME=JOB4 RELEASE=false

    - os: linux
      addons:
        apt:
          packages:
            - golang-1.6
            - qemu-user-static
          sources:
            - ubuntu-toolchain-r-test
      env: PLATFORM=linux-generic32 CACHE_NAME=JOB5 HOST=arm-linux-gnueabihf CROSS_COMPILER=arm-linux-gnueabihf- ARCH=arm ARCH_FULL=armv6 RELEASE=false

before_script:
  - if [ "$HOST" == "arm-linux-gnueabihf" ]; then
      export ARM_CROSS=arm-cross-tools;
      export ARM_CROSS_PATH=${HOME}/${ARM_CROSS};
      export PATH=$PATH:${ARM_CROSS_PATH}/bin;
      cd ${HOME};
      if [ ! -e cache/${ARM_CROSS}.tar.gz ]; then
        mkdir arm_cross_src && cd arm_cross_src;
        wget -nv ftp://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz && tar Jxf gmp-${GMP_VER}.tar.xz && cd gmp-${GMP_VER};
        ./configure;
        make -j4 && sudo make install && sudo /sbin/ldconfig;
        cd .. && wget -nv http://www.mpfr.org/mpfr-current/mpfr-${MPFR_VER}.tar.xz && tar Jxf mpfr-${MPFR_VER}.tar.xz && cd mpfr-${MPFR_VER};
        ./configure;
        make -j4 && sudo make install && sudo /sbin/ldconfig;
        cd .. && wget -nv ftp://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz && tar zxf mpc-${MPC_VER}.tar.gz && cd mpc-${MPC_VER};
        ./configure;
        make -j4 && sudo make install && sudo /sbin/ldconfig;
        cd .. && wget -nv https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz && tar Jxf binutils-${BINUTILS_VER}.tar.xz && mkdir build_binutils-${BINUTILS_VER}_arm && cd build_binutils-${BINUTILS_VER}_arm;
        ../binutils-${BINUTILS_VER}/configure --prefix=${ARM_CROSS_PATH} --program-prefix=${CROSS_COMPILER} --target=${HOST} --enable-lto --enable-interwork --disable-multilib --with-arch=${ARCH_FULL};
        make -j4 && make install;
        cd .. && wget -nv https://www.kernel.org/pub/linux/kernel/v${KERNEL_VER}/linux-${KERNEL_VER_FULL}.tar.xz && tar Jxf linux-${KERNEL_VER_FULL}.tar.xz && cd linux-${KERNEL_VER_FULL};
        make ARCH=${ARCH} INSTALL_HDR_PATH=${ARM_CROSS_PATH}/${HOST} headers_install;
        cd .. && wget -nv https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.bz2 && tar jxf gcc-${GCC_VER}.tar.bz2 && mkdir build_gcc-${GCC_VER}_arm && cd build_gcc-${GCC_VER}_arm;
        ../gcc-${GCC_VER}/configure --prefix=${ARM_CROSS_PATH} --program-prefix=${CROSS_COMPILER} --target=${HOST} --enable-lto --enable-languages=c,c++ --disable-multilib --enable-interwork --with-arch=${ARCH_FULL} --with-fpu=vfp --with-float=hard --enable-checking=release --enable-linker-build-id --enable-gnu-unique-object --enable-threads=posix --disable-sjlj-exceptions --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes;
        make -j4 all-gcc && make install-gcc;
        cd .. && wget -nv https://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VER}.tar.xz && tar Jxf glibc-${GLIBC_VER}.tar.xz && mkdir build_glibc-${GLIBC_VER}_arm && cd build_glibc-${GLIBC_VER}_arm;
        ../glibc-${GLIBC_VER}/configure --prefix=${ARM_CROSS_PATH}/${HOST} --build=${MACHTYPE} --host=${HOST} --target=${HOST} --with-headers=${ARM_CROSS_PATH}/${HOST}/include --disable-multilib --enable-add-ons libc_cv_forced_unwind=yes;
        make install-bootstrap-headers=yes install-headers && make -j4 csu/subdir_lib && install csu/crt1.o csu/crti.o csu/crtn.o ${ARM_CROSS_PATH}/${HOST}/lib && ${CROSS_COMPILER}gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${ARM_CROSS_PATH}/${HOST}/lib/libc.so && touch ${ARM_CROSS_PATH}/${HOST}/include/gnu/stubs.h;
        cd ../build_gcc-${GCC_VER}_arm && make -j4 all-target-libgcc && make install-target-libgcc;
        cd ../build_glibc-${GLIBC_VER}_arm && make -j4 && make install;
        cd ../build_gcc-${GCC_VER}_arm && make -j4 && make install;
        cd ../../;
        tar czf cache/${ARM_CROSS}.tar.gz --no-same-owner --no-same-permissions ${ARM_CROSS};
      else
        tar zxf cache/${ARM_CROSS}.tar.gz;
      fi;
      cd /lib/;
      sudo ln -s ${ARM_CROSS_PATH}/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 .;
      sudo ln -s ${ARM_CROSS_PATH}/arm-linux-gnueabihf/lib arm-linux-gnueabihf;
      cd ${TRAVIS_BUILD_DIR};
      export CC=${ARM_CROSS_PATH}/bin/${CROSS_COMPILER}gcc;
      export CXX=${ARM_CROSS_PATH}/bin/${CROSS_COMPILER}g++;
      export AR=${ARM_CROSS_PATH}/bin/${CROSS_COMPILER}ar;
      export RANLIB=${ARM_CROSS_PATH}/bin/${CROSS_COMPILER}ranlib;
      export LD=${ARM_CROSS_PATH}/bin/${CROSS_COMPILER}ld;
    fi
  - ${CC} --version && ${CXX} --version
  - mkdir lib && cd lib
  - wget -nv https://zlib.net/zlib-${ZLIB_VER}.tar.gz && tar zxf zlib-${ZLIB_VER}.tar.gz && cd zlib-${ZLIB_VER}
  - ./configure --prefix=/usr/local --static
  - make -j4 && sudo make -j4 install
  - cd .. && wget -nv https://ftp.gnu.org/gnu/ncurses/ncurses-${NCURSES_VER}.tar.gz && tar zxf ncurses-${NCURSES_VER}.tar.gz && cd ncurses-${NCURSES_VER}
  - if [ "$HOST" != "" ]; then
      CPPFLAGS=-P ./configure --prefix=/usr/local --host=${HOST};
    else
      CPPFLAGS=-P ./configure --prefix=/usr/local;
    fi
  - make -j4 && sudo make -j4 install
  - cd .. && wget -nv https://ftp.gnu.org/gnu/libiconv/libiconv-${LIBICONV_VER}.tar.gz && tar zxf libiconv-${LIBICONV_VER}.tar.gz && cd libiconv-${LIBICONV_VER}
  - if [ "$HOST" != "" ]; then
      ./configure --prefix=/usr/local --enable-static=yes --enable-shared=no --host=${HOST};
    else
      ./configure --prefix=/usr/local --enable-static=yes --enable-shared=no;
    fi
  - make -j4 && sudo make -j4 install
  - cd .. && wget -nv https://ftp.gnu.org/gnu/readline/readline-${READLINE_VER}.tar.gz && tar zxf readline-${READLINE_VER}.tar.gz && cd readline-${READLINE_VER}
  - if [ "$HOST" != "" ]; then
      ./configure --enable-shared=no CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib --host=${HOST};
    else
      ./configure --enable-shared=no CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib;
    fi
  - make -j4 && sudo make -j4 install
  - cd .. && wget -nv https://www.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz && tar zxf openssl-${OPENSSL_VER}.tar.gz && cd openssl-${OPENSSL_VER}
  - ./Configure --prefix=/usr/local -I/usr/local/include -L/usr/local/lib zlib no-shared ${PLATFORM}
  - make -j4 && make -j1 test && sudo make -j4 install_sw
  - if [ "$PLATFORM" == linux-x86_64 ]; then
      cd ..;
      wget -nv https://software.intel.com/sites/default/files/article/181731/intel-aesni-sample-library-v1.2.zip;
      unzip intel-aesni-sample-library-v1.2.zip && cd Intel_AESNI_Sample_Library_v1.2;
      ./mk_lnx64_all.sh;
      sudo cp -a intel_aes_lib/lib/x64/intel_aes64.a /usr/local/lib/libintelaes.a;
    fi
  - cd ../../

script:
 - cp travis-ci/Makefile_${PLATFORM} Makefile
 - make -j4;

after_success:
  - if [ "$RELEASE" == true ]; then
      cd travis-ci/release;
      echo vpnbridge vpnclient vpnserver | xargs -n 1 cp Authors.txt ReadMeFirst_Important_Notices_cn.txt ReadMeFirst_Important_Notices_en.txt ReadMeFirst_Important_Notices_ja.txt ReadMeFirst_License.txt;
      mkdir vpnbridge/code vpnclient/code vpnserver/code vpnbridge/lib vpnclient/lib vpnserver/lib;
      echo vpnbridge/lib vpnclient/lib vpnserver/lib | xargs -n 1 cp License.txt;
      echo vpnbridge/lib vpnclient/lib vpnserver/lib | xargs -n 1 cp /usr/local/lib/libcharset.a /usr/local/lib/libcrypto.a /usr/local/lib/libreadline.a /usr/local/lib/libiconv.a /usr/local/lib/libintelaes.a /usr/local/lib/libncurses.a /usr/local/lib/libssl.a /usr/local/lib/libz.a;
      cd ../../tmp/as/ && cp vpncmd.a vpnbridge.a ../../travis-ci/release/vpnbridge/code && cp vpncmd.a vpnclient.a ../../travis-ci/release/vpnclient/code && cp vpncmd.a vpnserver.a ../../travis-ci/release/vpnserver/code;
      sudo chmod 644 ../../bin/vpnserver/hamcore.se2;
      cd ../../travis-ci/release && echo vpnbridge vpnclient vpnserver | xargs -n 1 cp ../../bin/vpnserver/hamcore.se2;
      sudo chmod 744 vpnbridge/.install.sh vpnclient/.install.sh vpnserver/.install.sh;
      mkdir pkg;
      tar czf pkg/softether_open-vpnbridge-v4.24-9651-beta-linux-x64-64bit.tar.gz --no-same-owner --no-same-permissions vpnbridge;
      tar czf pkg/softether_open-vpnclient-v4.24-9651-beta-linux-x64-64bit.tar.gz --no-same-owner --no-same-permissions vpnclient;
      tar czf pkg/softether_open-vpnserver-v4.24-9651-beta-linux-x64-64bit.tar.gz --no-same-owner --no-same-permissions vpnserver;
      if [ "$TRAVIS_TAG" != "" ]; then
        go get github.com/tcnksm/ghr;
        ghr --username s520 --token $GITHUB_TOKEN --replace --prerelease $TRAVIS_TAG pkg/;
      fi;
    fi
